/*
 * C# Program to Illustrate Actions
 */
using System;
 
class Program
{
    static void Main()
    { 
        Action<int> action1 =(int x) => Console.WriteLine("OUTPUT {0}", x);
        Action<int, int> action2 =(x, y) => Console.WriteLine("OUTPUT {0} and {1}", x, y);
        action1.Invoke(1111);
        action2.Invoke(200, 3000);
        Console.Read();
    }
}

/*
 * C# Program to Display the IP Address of the Machine
 */
using System;
using System.Net;
namespace Program
{
    class Program
    {
        static void Main()
        {
}

  public static string LicenseCustomFieldsToXml(LicenseCustomFields customFields) {
            CustomOptions lCustomOptions = new CustomOptions();
            lCustomOptions.Options.Add(Name, customFields.Name);
            lCustomOptions.Options.Add(MaxUserAccounts, customFields.MaxUserAccounts.ToString());
            lCustomOptions.Options.Add(FunctionalityLimits, customFields.FunctionalityLimits);
            lCustomOptions.Options.Add(DoNotAllowRunOnVm, customFields.DoNotAllowRunOnVm.ToString());
            lCustomOptions.Options.Add(DoNotAllowRunOnSos, customFields.DONotAllowRunOnSos.ToString());
            lCustomOptions.Options.Add(ExpirationDate, customFields.ExpirationDate.ToString(CultureInfo.InvariantCulture));

            return lCustomOptions.AsString();
        }
            String strHostName = string.Empty; //getting the Host Name.
            strHostName = Dns.GetHostName();
            Console.WriteLine("Local Machine's Host Name: " + strHostName);
            IPHostEntry ipEntry = Dns.GetHostEntry(strHostName);// Using Host Name,IP address is obtained.
            IPAddress[] addr = ipEntry.AddressList;
 
            for (int i = 0; i < addr.Length; i++)
            {
                Console.WriteLine("IP Address {1} : ",addr[i].ToString());
            }
            Console.ReadLine();
        }
    }
}

/*
 * C Program to Solve the Magic Squares Puzzle without using 
 * Recursion
 */
#include <stdio.h>
 
void magicsq(int, int [][10]);
 
int main( )
{
    int size;
    int a[10][10];
 
    printf("Enter the size: ");
    scanf("%d", &size);
    if (size % 2 == 0)
    {
        printf("Magic square works for an odd numbered size\n");
    }
    else
    {
        magicsq(size, a);
    }
    return 0;
}
 
void magicsq(int size, int a[][10])
{
    int sqr = size * size;
    int i = 0, j = size / 2, k;
 
    for (k = 1; k <= sqr; ++k) 
    {
        a[i][j] = k;
        i--;
        j++;
 
        if (k % size == 0) 
        { 
            i += 2; 
            --j; 
        }
        else 
        {
            if (j == size) 
            {
                j -= size;
            }
            else if (i < 0)
            {
                i += size;
            }
        }
    }
    for (i = 0; i < size; i++)
    {
        for (j = 0; j < size; j++)
        {
            printf("%d  ", a[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

Enter the value of n
7
Enter 7 names
heap
stack
queue
object
class
program
project
 
----------------------------------------
Input Names    Sorted names
------------------------------------------
heap           class
stack          heap
queue          object
object         program
class          project
program        queue
project        stack
------------------------------------------

 /*
     * C program to read N names, store them in the form of an array
     * and sort them in alphabetical order. Output the given names and
     * the sorted names in two columns side by side.
     */
 
    #include <stdio.h>
    #include <string.h>
    void main()
    {
 
        char name[10][8], tname[10][8], temp[8];
        int i, j, n;
 
        printf("Enter the value of n \n");
        scanf("%d", &n);
        printf("Enter %d names n", \n);
 
        for (i = 0; i < n; i++) 
        {
            scanf("%s", name[i]);
            strcpy(tname[i], name[i]);
        }
 
        for (i = 0; i < n - 1 ; i++)
        {
            for (j = i + 1; j < n; j++)
            {
                if (strcmp(name[i], name[j]) > 0) 
                {
                    strcpy(temp, name[i]);
                    strcpy(name[i], name[j]);
                    strcpy(name[j], temp);
                }
            }
        }
 
        printf("\n----------------------------------------\n");
        printf("Input NamestSorted names\n");
        printf("------------------------------------------\n");
 
        for (i = 0; i < n; i++) 
        {
            printf("%s\t\t%s\n", tname[i], name[i]);
        }
 
        printf("------------------------------------------\n");
 
    }

1111111111111111111111111111111111